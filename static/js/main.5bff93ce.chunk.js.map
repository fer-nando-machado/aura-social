{"version":3,"sources":["components/Header.js","components/Footer.js","components/InstagramAccess.js","components/InstagramStep.js","external/api.js","Home.js","Routes.js","serviceWorker.js","index.js"],"names":["Header","className","inner","src","process","alt","Footer","href","InstagramAccess","InstagramStep","message","retry","api","authorize","code","a","data","client_id","redirect_uri","fetch","method","headers","body","JSON","stringify","response","json","user_id","access_token","Error","error_message","Home","query","useState","step","setStep","error","setError","setCode","token","setToken","useEffect","then","catch","0","1","2","9","withQueryParams","Component","URLSearchParams","useLocation","search","params","get","Routes","HomeWithQueryParams","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.5bff93ce.chunk.js","sourcesContent":["import React from \"react\"\nimport \"./Header.css\"\n\nfunction Header({ inner }) {\n  const className = \"Header \" + (inner ? \"HeaderInner\" : \"\")\n\n  return (\n    <div className={className}>\n      <img src={`${process.env.REACT_APP_IMAGES}lotus.svg`} alt=\"Aura Social\" />\n      <div className=\"HeaderTitle\">Aura SociaL</div>\n    </div>\n  )\n}\n\nexport default Header\n","import React from \"react\"\nimport \"./Footer.css\"\n\nfunction Footer() {\n  return (\n    <div className=\"Footer\">\n      <a className=\"Link\" href=\"https://github.com/fernandomachado90/aura-social\">\n        <span>Made with â™¡ by Fernando Machado</span>\n      </a>\n      {\" | \"}\n      <a className=\"Link\" href=\"https://www.flaticon.com/authors/good-ware\">\n        <span>Icons by Good Ware</span>\n      </a>\n    </div>\n  )\n}\n\nexport default Footer\n","import React from \"react\"\nimport \"./InstagramAccess.css\"\n\nfunction InstagramAccess() {\n  const url =\n    \"https://api.instagram.com/oauth/authorize\" +\n    \"?client_id=\" +\n    process.env.REACT_APP_INSTAGRAM_CLIENT_ID +\n    \"&redirect_uri=\" +\n    process.env.REACT_APP_URL +\n    \"&scope=user_profile,user_media&response_type=code\"\n\n  return (\n    <a className=\"InstagramAccess Link\" href={url}>\n      <img src={`${process.env.REACT_APP_IMAGES}instagram.svg`} alt=\"Continue with Instagram\" />\n      <span>Continue with Instagram</span>\n    </a>\n  )\n}\n\nexport default InstagramAccess\n","import React from \"react\"\n\nimport \"./InstagramStep.css\"\n\nfunction InstagramStep({ message, retry }) {\n  return (\n    <div className=\"InstagramStep\">\n      {message}\n      {retry && (\n        <p>\n          <a className=\"Link\" href=\"/aura-social/\">\n            <span>Try Again</span>\n          </a>\n        </p>\n      )}\n    </div>\n  )\n}\n\nexport default InstagramStep\n","const api = {\n  authorize: async (code) => {\n    const url = process.env.REACT_APP_API + \"authorize\"\n    const data = {\n      client_id: process.env.REACT_APP_INSTAGRAM_CLIENT_ID,\n      redirect_uri: process.env.REACT_APP_URL,\n      code: code,\n    }\n\n    try {\n      const response = await fetch(url, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(data),\n      })\n      const body = await response.json()\n      if (body.user_id) return body.access_token\n      throw new Error(body.error_message)\n    } catch (error) {\n      throw error.message\n    }\n  },\n}\n\nexport default api\n","import React, { useState, useEffect } from \"react\"\n\nimport \"./Home.css\"\n\nimport Header from \"./components/Header\"\nimport Footer from \"./components/Footer\"\nimport InstagramAccess from \"./components/InstagramAccess\"\nimport InstagramStep from \"./components/InstagramStep\"\n\nimport api from \"./external/api\"\n\nfunction Home({ query }) {\n  const [step, setStep] = useState(0)\n  const [error, setError] = useState()\n  const [code, setCode] = useState()\n  const [token, setToken] = useState()\n\n  useEffect(() => {\n    if (!query) return\n    if (query.code) setCode(query.code)\n    else if (query.error) setError(query.error)\n  }, [query])\n\n  useEffect(() => {\n    if (!code) return\n    api\n      .authorize(code)\n      .then((token) => setToken(token))\n      .catch((error) => setError(error))\n  }, [code])\n\n  useEffect(() => {\n    if (!token) return\n    // TODO\n  }, [token])\n\n  useEffect(() => {\n    if (error) setStep(9)\n    else if (token) setStep(2)\n    else if (code) setStep(1)\n  }, [error, code, token])\n\n  return (\n    <div className=\"Home\">\n      <Header inner={step > 0} />\n      {\n        {\n          0: <InstagramAccess />,\n          1: <InstagramStep message=\"Authorizing...\" />,\n          2: <InstagramStep message=\"Processing...\" />,\n          9: <InstagramStep message={error} retry={true} />,\n        }[step]\n      }\n      <Footer />\n    </div>\n  )\n}\n\nexport default Home\n","import React from \"react\"\n\nimport { BrowserRouter as Router, Route, useLocation } from \"react-router-dom\"\n\nimport Home from \"./Home\"\n\nfunction Routes() {\n  const HomeWithQueryParams = withQueryParams(Home)\n  return (\n    <Router>\n      <Route path=\"/\">\n        <HomeWithQueryParams />\n      </Route>\n    </Router>\n  )\n}\n\nconst withQueryParams = (Component) => {\n  return () => {\n    const query = useQuery()\n    const params = {\n      error: query.get(\"error_description\"),\n      code: query.get(\"code\"),\n    }\n    return <Component query={params} />\n  }\n}\n\nfunction useQuery() {\n  return new URLSearchParams(useLocation().search)\n}\n\nexport default Routes\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (response.status === 404 || (contentType != null && contentType.indexOf(\"javascript\") === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\"No internet connection found. App is running in offline mode.\")\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport Routes from \"./Routes\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <Routes />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}