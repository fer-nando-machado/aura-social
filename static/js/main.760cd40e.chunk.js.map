{"version":3,"sources":["Header.js","Footer.js","InstagramAccess.js","InstagramToken.js","InstagramError.js","Home.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","href","src","process","alt","Footer","InstagramAccess","InstagramToken","code","useState","token","setToken","useEffect","url","data","client_id","redirect_uri","a","fetch","method","headers","body","JSON","stringify","response","json","console","log","user_id","error_message","fetchData","undefined","InstagramError","message","Home","step","setStep","setCode","error","setError","query","URLSearchParams","useLocation","search","has","get","0","1","2","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"mWAceA,MAXf,YAA8B,IAAbC,EAAY,EAAZA,UACf,OACE,yBAAKA,UAAS,iBAAYA,IACxB,uBAAGC,KAAK,iBACN,yBAAKC,IAAKC,gCAA4CC,IAAI,KAC1D,yBAAKJ,UAAU,eAAf,kB,MCKOK,MAVf,WACE,OACE,yBAAKL,UAAU,UACb,uBAAGA,UAAU,OAAOC,KAAK,oDACvB,yE,MCUOK,MAdf,WAME,OACE,uBAAGN,UAAU,uBAAuBC,KAN1B,sLAOR,yBAAKC,IAAKC,oCAAgDC,IAAI,KAC9D,2D,yBCsBSG,MAhCf,YAAiC,IAARC,EAAO,EAAPA,KAAO,EACJC,qBADI,mBACvBC,EADuB,KAChBC,EADgB,KAyB9B,OAtBAC,qBAAU,WACR,IAAMC,EAAMV,8CACNW,EAAO,CACXC,UAAWZ,kBACXa,aAAcb,mDACdK,KAAMA,GALM,4CAQd,8BAAAS,EAAA,sEACyBC,MAAML,EAAK,CAC5BM,OAAQ,OACRC,QAAS,CAAC,eAAgB,oBAC1BC,KAAMC,KAAKC,UAAUT,KAJ7B,cACQU,EADR,gBAMqBA,EAASC,OAN9B,OAMQJ,EANR,OAOEK,QAAQC,IAAIN,GACZV,EAASU,EAAKO,SAAWP,EAAKQ,eARhC,4CARc,0DAmBdC,KACC,CAACtB,IAGF,yBAAKR,UAAU,uBACF+B,IAAVrB,EAAsB,aAAeA,I,MChB7BsB,MATf,YAAoC,IAAXC,EAAU,EAAVA,QACvB,OACE,yBAAKjC,UAAU,kBACb,2BAAIiC,GACJ,2BAAG,uBAAGjC,UAAU,OAAOC,KAAK,iBAAgB,+CCuCnCiC,MAnCf,WAAiB,IAAD,EACUzB,mBAAS,GADnB,mBACP0B,EADO,KACDC,EADC,OAEU3B,qBAFV,mBAEPD,EAFO,KAED6B,EAFC,OAGY5B,qBAHZ,mBAGP6B,EAHO,KAGAC,EAHA,KAIRC,EA4BC,IAAIC,gBAAgBC,cAAcC,QAhBzC,OAVA/B,qBAAU,WACJ4B,EAAMI,IAAI,SACZP,EAAQG,EAAMK,IAAI,SAClBT,EAAQ,IACCI,EAAMK,IAAI,WACnBN,EAASC,EAAMK,IAAI,sBACnBT,EAAQ,MAET,CAACI,IAGF,oCACE,kBAAC,EAAD,CAAQxC,UAAWmC,EAAO,EAAI,cAAgB,KAE5C,CACEW,EAAG,kBAAC,EAAD,MACHC,EAAG,kBAAC,EAAD,CAAgBvC,KAAMA,IACzBwC,EAAG,kBAAC,EAAD,CAAgBf,QAASK,KAC5BH,GAEJ,kBAAC,EAAD,Q,MCfSc,MAbf,WAEE,OACE,yBAAKjD,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOkD,KAAK,KACV,kBAAC,EAAD,UCJUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA7B,GACLZ,QAAQY,MAAMA,EAAML,c","file":"static/js/main.760cd40e.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.css';\n\nfunction Header({className}) {\n  return (\n    <div className={`Header ${className}`}>\n      <a href=\"/aura-social/\">\n        <img src={process.env.REACT_APP_IMAGES + \"lotus.svg\"} alt=\"\" />\n        <div className=\"HeaderTitle\">Aura SociaL</div>\n      </a>\n    </div>\n  )\n}\n\nexport default Header;\n","import React from 'react';\nimport './Footer.css';\n\nfunction Footer() {\n  return (\n    <div className=\"Footer\">\n      <a className=\"Link\" href=\"https://github.com/fernandomachado90/aura-social\">\n        <span>Made with â™¡ by Fernando Machado</span>\n      </a>\n    </div>\n  )\n}\n\nexport default Footer;\n","import React from 'react';\nimport './InstagramAccess.css';\n\nfunction InstagramAccess() {\n  const url = \"https://api.instagram.com/oauth/authorize\" +\n              \"?client_id=\" + process.env.REACT_APP_INSTAGRAM_CLIENT_ID +\n              \"&redirect_uri=\" + process.env.REACT_APP_URL +\n              \"&scope=user_profile,user_media&response_type=code\"\n\n  return (\n    <a className=\"InstagramAccess Link\" href={url}>\n      <img src={process.env.REACT_APP_IMAGES + \"instagram.svg\"} alt=\"\" />\n      <span>Continue with Instagram</span>\n    </a>\n  );\n}\n\nexport default InstagramAccess;\n","import React, { useState, useEffect } from 'react';\n\nfunction InstagramToken({code}) {\n  const [token, setToken] = useState();\n\n  useEffect(() => {\n    const url = process.env.REACT_APP_API + \"authorize\";\n    const data = {\n      client_id: process.env.REACT_APP_INSTAGRAM_CLIENT_ID,\n      redirect_uri: process.env.REACT_APP_URL,\n      code: code,\n    }\n\n    async function fetchData() {\n      const response = await fetch(url, {\n            method: 'POST',\n            headers: {'Content-Type': 'application/json',},\n            body: JSON.stringify(data),\n      })\n      const body = await response.json()\n      console.log(body)\n      setToken(body.user_id || body.error_message)\n    }\n\n    fetchData();\n  }, [code]);\n\n  return (\n    <div className=\"InstagramToken\">\n      {token === undefined ? \"Loading...\" : token}\n    </div>\n  )\n}\n\nexport default InstagramToken;\n","import React from 'react';\n\nimport './InstagramError.css';\n\nfunction InstagramError({message}) {\n  return (\n    <div className=\"InstagramError\">\n      <p>{message}</p>\n      <p><a className=\"Link\" href=\"/aura-social/\"><span>Try Again</span></a></p>\n    </div>\n  )\n}\n\nexport default InstagramError;\n","import React, {useState, useEffect} from 'react';\n\nimport {\n  useLocation,\n} from \"react-router-dom\";\n\nimport Header from './Header';\nimport Footer from './Footer';\nimport InstagramAccess from './InstagramAccess';\nimport InstagramToken from './InstagramToken';\nimport InstagramError from './InstagramError';\n\nfunction Home() {\n  const [step, setStep] = useState(0);\n  const [code, setCode] = useState();\n  const [error, setError] = useState();\n  const query = useQuery();\n\n  useEffect(() => {\n    if (query.has(\"code\") ) {\n      setCode(query.get(\"code\"));\n      setStep(1)\n    } else if (query.get(\"error\")) {\n      setError(query.get(\"error_description\"));\n      setStep(2)\n    }\n  }, [query]);\n\n  return (\n    <>\n      <Header className={step > 0 ? \"HeaderInner\" : \"\"}/>\n      {\n        {\n          0: <InstagramAccess />,\n          1: <InstagramToken code={code} />,\n          2: <InstagramError message={error} />,\n        }[step]\n      }\n      <Footer/>\n    </>\n  )\n}\n\nfunction useQuery() {\n  return new URLSearchParams(useLocation().search);\n}\n\nexport default Home;\n","import React from 'react';\n\nimport {\n  BrowserRouter as Router,\n  Route,\n} from \"react-router-dom\";\n\nimport Home from './Home'\nimport './App.css';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <Router>\n        <Route path=\"/\">\n          <Home />\n        </Route>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}