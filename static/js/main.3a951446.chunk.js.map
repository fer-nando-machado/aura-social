{"version":3,"sources":["Header.js","Footer.js","InstagramAccess.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","href","src","process","alt","Footer","InstagramAccess","Home","query","URLSearchParams","useLocation","search","has","console","log","get","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uUAceA,MAXf,YAA8B,IAAbC,EAAY,EAAZA,UACf,OACE,yBAAKA,UAAS,iBAAYA,IACxB,uBAAGC,KAAK,iBACN,yBAAKC,IAAKC,gCAA4CC,IAAI,MAE5D,yBAAKJ,UAAU,eAAf,iB,MCESK,MARf,WACE,OACE,yBAAKL,UAAU,UACb,uBAAGA,UAAU,OAAOC,KAAK,wCAAzB,0C,MCWSK,MAdf,WAME,OACE,uBAAGN,UAAU,kBAAkBC,KANrB,sLAOR,yBAAKC,IAAKC,oCAAgDC,IAAI,KAC9D,0BAAMJ,UAAU,QAAhB,6B,MCeN,SAASO,IACP,IAAIC,EA+BG,IAAIC,gBAAgBC,cAAcC,QA7BzC,OAAIH,EAAMI,IAAI,SACZC,QAAQC,IAAIN,EAAMO,IAAI,SAEpB,oCACE,kBAAC,EAAD,CAAQf,UAAU,gBADpB,aAOAQ,EAAMI,IAAI,SAEV,oCACE,kBAAC,EAAD,CAAQZ,UAAU,gBADpB,wBAEuB,uBAAGA,UAAU,OAAOC,KAAK,iBAAzB,QAFvB,kBAQF,oCACE,kBAAC,EAAD,MACA,kBAAC,EAAD,OAUSe,MAjDf,WACE,OACE,yBAAKhB,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOiB,KAAK,KACV,kBAACV,EAAD,QAIJ,kBAAC,EAAD,QCVcW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtB,QAAQsB,MAAMA,EAAMC,c","file":"static/js/main.3a951446.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.css';\n\nfunction Header({className}) {\n  return (\n    <div className={`Header ${className}`}>\n      <a href=\"/aura-social/\">\n        <img src={process.env.REACT_APP_IMAGES + \"lotus.svg\"} alt=\"\" />\n      </a>\n      <div className=\"HeaderTitle\">Aura SociaL</div>\n    </div>\n  )\n}\n\nexport default Header;\n","import React from 'react';\nimport './Footer.css';\n\nfunction Footer() {\n  return (\n    <div className=\"Footer\">\n      <a className=\"Link\" href=\"https://github.com/fernandomachado90\">Made with â™¡ by Fernando Machado</a>\n    </div>\n  )\n}\n\nexport default Footer;\n","import React from 'react';\nimport './InstagramAccess.css';\n\nfunction InstagramAccess() {\n  const url = \"https://api.instagram.com/oauth/authorize?\" +\n  \"client_id=\" + process.env.REACT_APP_INSTAGRAM_CLIENT_ID +\n  \"&redirect_uri=\" + process.env.REACT_APP_URL +\n  \"&scope=user_profile,user_media&response_type=code\"\n\n  return (\n    <a className=\"InstagramAccess\" href={url}>\n      <img src={process.env.REACT_APP_IMAGES + \"instagram.svg\"} alt=\"\" />\n      <span className=\"Link\">Continue with Instagram</span>\n    </a>\n  );\n}\n\nexport default InstagramAccess;\n","import React from 'react';\n\nimport {\n  BrowserRouter as Router,\n  Route,\n  useLocation,\n} from \"react-router-dom\";\n\nimport Header from './Header';\nimport Footer from './Footer';\nimport InstagramAccess from './InstagramAccess';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Route path=\"/\">\n          <Home />\n        </Route>\n      </Router>\n\n      <Footer/>\n    </div>\n  );\n}\n\nfunction Home() {\n  let query = useQuery();\n\n  if (query.has(\"code\")) {\n    console.log(query.get(\"code\"))\n    return (\n      <>\n        <Header className=\"HeaderInner\"/>\n        Success.\n      </>\n    )\n  }\n\n  if (query.has(\"error\")) {\n    return (\n      <>\n        <Header className=\"HeaderInner\"/>\n        Access denied. Click <a className=\"Link\" href=\"/aura-social/\">here</a> to try again.\n      </>\n    )\n  }\n\n  return (\n    <>\n      <Header/>\n      <InstagramAccess />\n    </>\n  )\n\n}\n\nfunction useQuery() {\n  return new URLSearchParams(useLocation().search);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}