{"version":3,"sources":["components/Header.js","components/Footer.js","components/InstagramAccess.js","components/InstagramStep.js","components/InstagramMedia.js","external/api.js","Home.js","Routes.js","serviceWorker.js","index.js"],"names":["Header","className","inner","src","process","alt","Footer","href","InstagramAccess","InstagramStep","message","retry","colorThief","ColorThief","InstagramMedia","urls","total","length","useState","index","setIndex","color","setColor","onLoad","event","getColor","target","fetchColors","style","border","crossOrigin","Math","floor","api","authorize","code","a","data","client_id","redirect_uri","fetch","method","headers","body","JSON","stringify","response","json","user_id","access_token","Error","error_message","fetchMedia","token","url","images","username","error","i","m","push","media_type","thumbnail_url","media_url","paging","next","Home","query","step","setStep","setError","setCode","setToken","setUsername","mediaURLs","setMediaURLs","useEffect","then","catch","0","1","2","3","9","withQueryParams","Component","URLSearchParams","useLocation","search","params","get","Routes","HomeWithQueryParams","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.7bdca3be.chunk.js","sourcesContent":["import React from \"react\"\nimport \"./Header.css\"\n\nfunction Header({ inner }) {\n  const className = \"Header \" + (inner ? \"HeaderInner\" : \"\")\n\n  return (\n    <div className={className}>\n      <img src={`${process.env.REACT_APP_IMAGES}lotus.svg`} alt=\"Aura Social\" />\n      <div className=\"HeaderTitle\">Aura SociaL</div>\n    </div>\n  )\n}\n\nexport default Header\n","import React from \"react\"\nimport \"./Footer.css\"\n\nfunction Footer() {\n  return (\n    <div className=\"Footer\">\n      <a className=\"Link\" href=\"https://github.com/fernandomachado90/aura-social\">\n        <span>Made with â™¡ by Fernando Machado</span>\n      </a>\n      {\" | \"}\n      <a className=\"Link\" href=\"https://www.flaticon.com/authors/good-ware\">\n        <span>Icons by Good Ware</span>\n      </a>\n    </div>\n  )\n}\n\nexport default Footer\n","import React from \"react\"\nimport \"./InstagramAccess.css\"\n\nfunction InstagramAccess() {\n  const url =\n    \"https://api.instagram.com/oauth/authorize\" +\n    \"?client_id=\" +\n    process.env.REACT_APP_INSTAGRAM_CLIENT_ID +\n    \"&redirect_uri=\" +\n    process.env.REACT_APP_URL +\n    \"&scope=user_profile,user_media&response_type=code\"\n\n  return (\n    <a className=\"InstagramAccess Link\" href={url}>\n      <img src={`${process.env.REACT_APP_IMAGES}instagram.svg`} alt=\"Continue with Instagram\" />\n      <span>Continue with Instagram</span>\n    </a>\n  )\n}\n\nexport default InstagramAccess\n","import React from \"react\"\n\nimport \"./InstagramStep.css\"\n\nfunction InstagramStep({ message, retry }) {\n  return (\n    <div className=\"InstagramStep\">\n      {message}\n      {retry && (\n        <p>\n          <a className=\"Link\" href=\"/aura-social/\">\n            <span>Try Again</span>\n          </a>\n        </p>\n      )}\n    </div>\n  )\n}\n\nexport default InstagramStep\n","import React, { useState } from \"react\"\n\nimport \"./InstagramMedia.css\"\n\nimport ColorThief from \"../../node_modules/colorthief/dist/color-thief.mjs\"\n\nconst colorThief = new ColorThief()\n\nfunction InstagramMedia({ urls }) {\n  const total = urls.length\n  const [index, setIndex] = useState(0)\n  const [color, setColor] = useState(\"rgb(255,255,255)\")\n\n  function fetchColors(event) {\n    const color = colorThief.getColor(event.target, 7)\n    //console.log(event.target.src, color)\n    setColor(`rgb(${color[0]}, ${color[1]}, ${color[2]})`)\n    if (index + 1 < total) setIndex(index + 1)\n  }\n\n  function getProgress() {\n    return Math.floor(((index + 1) * 100) / total)\n  }\n\n  return (\n    <div className=\"InstagramMedia\">\n      {index < total && (\n        <img\n          src={urls[index]}\n          onLoad={(event) => fetchColors(event)}\n          style={{ border: `3px dashed ${color}` }}\n          alt=\"\"\n          crossOrigin=\"anonymous\"\n        />\n      )}\n      <span>{getProgress()}%</span>\n    </div>\n  )\n}\n\nexport default InstagramMedia\n","const api = {\n  authorize: async (code) => {\n    try {\n      const url = process.env.REACT_APP_API + \"authorize\"\n      const data = {\n        client_id: process.env.REACT_APP_INSTAGRAM_CLIENT_ID,\n        redirect_uri: process.env.REACT_APP_URL,\n        code: code,\n      }\n\n      const response = await fetch(url, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(data),\n      })\n      const body = await response.json()\n      if (body.user_id) return body.access_token\n      throw new Error(body.error_message)\n    } catch (error) {\n      throw error.message\n    }\n  },\n  fetchMedia: async (token) => {\n    try {\n      let url =\n        \"https://graph.instagram.com/me/media\" +\n        \"?fields=username,media_type,media_url,thumbnail_url\" +\n        \"&access_token=\" +\n        token\n\n      let images = []\n      let username = \"\"\n      while (url) {\n        const response = await fetch(url)\n        const body = await response.json()\n        if (body.error) throw new Error(body.error)\n\n        for (let i = 0; i < body.data.length; i++) {\n          const m = body.data[i]\n          images.push(m.media_type === \"VIDEO\" ? m.thumbnail_url : m.media_url)\n        }\n        username = body.data[0].username\n        url = body.paging.next\n      }\n      return { username: username, images: images }\n    } catch (error) {\n      throw error.message\n    }\n  },\n}\n\nexport default api\n","import React, { useState, useEffect } from \"react\"\n\nimport \"./Home.css\"\n\nimport Header from \"./components/Header\"\nimport Footer from \"./components/Footer\"\nimport InstagramAccess from \"./components/InstagramAccess\"\nimport InstagramStep from \"./components/InstagramStep\"\nimport InstagramMedia from \"./components/InstagramMedia\"\n\nimport api from \"./external/api\"\n\nfunction Home({ query }) {\n  const [step, setStep] = useState(0)\n  const [error, setError] = useState()\n  const [code, setCode] = useState()\n  const [token, setToken] = useState()\n  const [username, setUsername] = useState()\n  const [mediaURLs, setMediaURLs] = useState()\n\n  useEffect(() => {\n    if (!query) return\n    if (query.code) setCode(query.code)\n    else if (query.error) setError(query.error)\n  }, [query])\n\n  useEffect(() => {\n    if (!code) return\n    api\n      .authorize(code)\n      .then((token) => setToken(token))\n      .catch((error) => setError(error))\n  }, [code])\n\n  useEffect(() => {\n    if (!token) return\n\n    api\n      .fetchMedia(token)\n      .then((response) => {\n        setMediaURLs(response.images)\n        setUsername(response.username)\n      })\n      .catch((error) => setError(error))\n  }, [token])\n\n  useEffect(() => {\n    if (error) setStep(9)\n    else if (username) setStep(3)\n    else if (token) setStep(2)\n    else if (code) setStep(1)\n  }, [error, code, token, username])\n\n  return (\n    <div className=\"Home\">\n      <Header inner={step > 0} />\n      {\n        {\n          0: <InstagramAccess />,\n          1: <InstagramStep message=\"Authorizing...\" />,\n          2: <InstagramStep message=\"Fetching media...\" />,\n          3: <InstagramMedia urls={mediaURLs} />,\n          9: <InstagramStep message={error} retry={true} />,\n        }[step]\n      }\n      <Footer />\n    </div>\n  )\n}\n\nexport default Home\n","import React from \"react\"\n\nimport { BrowserRouter as Router, Route, useLocation } from \"react-router-dom\"\n\nimport Home from \"./Home\"\n\nfunction Routes() {\n  const HomeWithQueryParams = withQueryParams(Home)\n  return (\n    <Router>\n      <Route path=\"/\">\n        <HomeWithQueryParams />\n      </Route>\n    </Router>\n  )\n}\n\nconst withQueryParams = (Component) => {\n  return () => {\n    const query = useQuery()\n    const params = {\n      error: query.get(\"error_description\"),\n      code: query.get(\"code\"),\n    }\n    return <Component query={params} />\n  }\n}\n\nfunction useQuery() {\n  return new URLSearchParams(useLocation().search)\n}\n\nexport default Routes\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (response.status === 404 || (contentType != null && contentType.indexOf(\"javascript\") === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\"No internet connection found. App is running in offline mode.\")\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport Routes from \"./Routes\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <Routes />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}