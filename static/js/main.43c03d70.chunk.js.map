{"version":3,"sources":["components/Header.js","components/Footer.js","components/InstagramAccess.js","components/InstagramError.js","Home.js","Routes.js","serviceWorker.js","index.js"],"names":["Header","className","src","process","alt","Footer","href","InstagramAccess","InstagramError","message","Home","query","useState","step","setStep","code","setCode","error","setError","token","setToken","useEffect","steps","AUTHORIZE","ERROR","data","client_id","redirect_uri","a","fetch","method","headers","body","JSON","stringify","response","json","user_id","access_token","PROCESS","error_message","console","warn","fetchData","log","ACCESS","0","1","2","3","HomeWithQueryParams","URLSearchParams","useLocation","search","params","get","Routes","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"kYAYeA,MATf,YAA8B,IAAbC,EAAY,EAAZA,UACf,OACE,yBAAKA,UAAS,iBAAYA,IACxB,yBAAKC,IAAKC,gCAA4CC,IAAI,KAC1D,yBAAKH,UAAU,eAAf,iB,MCQSI,MAZf,WACE,OACE,yBAAKJ,UAAU,UACb,uBAAGA,UAAU,OAAOK,KAAK,oDACvB,uEAFJ,MAGS,uBAAGL,UAAU,OAAOK,KAAK,8CAC9B,uD,MCQOC,MAdf,WAME,OACE,uBAAGN,UAAU,uBAAuBK,KAN1B,sLAOR,yBAAKJ,IAAKC,oCAAgDC,IAAI,KAC9D,2D,MCCSI,MATf,YAAoC,IAAXC,EAAU,EAAVA,QACvB,OACE,yBAAKR,UAAU,kBACZQ,EACD,2BAAG,uBAAGR,UAAU,OAAOK,KAAK,iBAAgB,+CCiFnCI,MAhFf,YAAwB,IAATC,EAAQ,EAARA,MAAQ,EACGC,mBAAS,GADZ,mBACdC,EADc,KACRC,EADQ,OAEGF,qBAFH,mBAEdG,EAFc,KAERC,EAFQ,OAGKJ,qBAHL,mBAGdK,EAHc,KAGPC,EAHO,OAIKN,qBAJL,mBAIdO,EAJc,KAIPC,EAJO,KAMrBC,qBAAU,WACHV,IAEDA,EAAMI,MACRC,EAAQL,EAAMI,MACdD,EAAQQ,EAAMC,YACLZ,EAAMM,QACfC,EAASP,EAAMM,OACfH,EAAQQ,EAAME,WAEf,CAACb,IAEJU,qBAAU,WACR,GAAKN,EAAL,CAEA,IACMU,EAAO,CACXC,UAAWvB,kBACXwB,aAAcxB,mDACdY,KAAMA,IAGO,uCAAG,8BAAAa,EAAA,sEACOC,MARb1B,8CAQwB,CAC5B2B,OAAQ,OACRC,QAAS,CAAC,eAAgB,oBAC1BC,KAAMC,KAAKC,UAAUT,KAJX,cACVU,EADU,gBAMGA,EAASC,OANZ,QAMVJ,EANU,QAQPK,SACPjB,EAASY,EAAKM,cACdxB,EAAQQ,EAAMiB,WAEdrB,EAASc,EAAKQ,eAAiB,oBAC/B1B,EAAQQ,EAAME,OACdiB,QAAQC,KAAKV,IAdC,2CAAH,qDAiBfW,MAEC,CAAC5B,IAGJM,qBAAU,WACHF,GAELsB,QAAQG,IAAI,gBAEX,CAACzB,IAEJ,IAAMG,EAAQ,CACZuB,OAAQ,EACRrB,MAAO,EACPD,UAAW,EACXgB,QAAS,GAGX,OACE,yBAAKtC,UAAU,QACb,kBAAC,EAAD,CAAQA,UAAWY,EAAOS,EAAMuB,OAAS,cAAgB,KAEvD,CACEC,EAAG,kBAAC,EAAD,MACHC,EAAG,kBAAC,EAAD,CAAgBtC,QAASQ,IAC5B+B,EAAG,sDACHC,EAAG,sDACHpC,GAEJ,kBAAC,EAAD,QChEN,SAASqC,IACP,IAAMvC,EAWC,IAAIwC,gBAAgBC,cAAcC,QAVnCC,EAAS,CACbrC,MAAON,EAAM4C,IAAI,qBACjBxC,KAAMJ,EAAM4C,IAAI,SAElB,OACE,kBAAC,EAAD,CAAM5C,MAAO2C,IAQFE,MAzBf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,KACV,kBAACP,EAAD,SCFYQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAzD,GACLwB,QAAQxB,MAAMA,EAAMR,c","file":"static/js/main.43c03d70.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.css';\n\nfunction Header({className}) {\n  return (\n    <div className={`Header ${className}`}>\n      <img src={process.env.REACT_APP_IMAGES + \"lotus.svg\"} alt=\"\" />\n      <div className=\"HeaderTitle\">Aura SociaL</div>\n    </div>\n  )\n}\n\nexport default Header;\n","import React from 'react';\nimport './Footer.css';\n\nfunction Footer() {\n  return (\n    <div className=\"Footer\">\n      <a className=\"Link\" href=\"https://github.com/fernandomachado90/aura-social\">\n        <span>Made with â™¡ by Fernando Machado</span>\n      </a> | <a className=\"Link\" href=\"https://www.flaticon.com/authors/good-ware\">\n        <span>Icons by Good Ware</span>\n      </a>\n    </div>\n  )\n}\n\nexport default Footer;\n","import React from 'react';\nimport './InstagramAccess.css';\n\nfunction InstagramAccess() {\n  const url = \"https://api.instagram.com/oauth/authorize\" +\n              \"?client_id=\" + process.env.REACT_APP_INSTAGRAM_CLIENT_ID +\n              \"&redirect_uri=\" + process.env.REACT_APP_URL +\n              \"&scope=user_profile,user_media&response_type=code\"\n\n  return (\n    <a className=\"InstagramAccess Link\" href={url}>\n      <img src={process.env.REACT_APP_IMAGES + \"instagram.svg\"} alt=\"\" />\n      <span>Continue with Instagram</span>\n    </a>\n  );\n}\n\nexport default InstagramAccess;\n","import React from 'react';\n\nimport './InstagramError.css';\n\nfunction InstagramError({message}) {\n  return (\n    <div className=\"InstagramError\">\n      {message}\n      <p><a className=\"Link\" href=\"/aura-social/\"><span>Try Again</span></a></p>\n    </div>\n  )\n}\n\nexport default InstagramError;\n","import React, {useState, useEffect} from 'react';\n\nimport './Home.css';\n\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport InstagramAccess from './components/InstagramAccess';\nimport InstagramError from './components/InstagramError';\n\nfunction Home({query}) {\n  const [step, setStep] = useState(0);\n  const [code, setCode] = useState();\n  const [error, setError] = useState();\n  const [token, setToken] = useState();\n\n  useEffect(() => {\n    if (!query) return\n\n    if (query.code) {\n      setCode(query.code)\n      setStep(steps.AUTHORIZE)\n    } else if (query.error) {\n      setError(query.error)\n      setStep(steps.ERROR)\n    }\n  }, [query]);\n\n  useEffect(() => {\n    if (!code) return\n\n    const url = process.env.REACT_APP_API + \"authorize\";\n    const data = {\n      client_id: process.env.REACT_APP_INSTAGRAM_CLIENT_ID,\n      redirect_uri: process.env.REACT_APP_URL,\n      code: code,\n    }\n\n    const fetchData = async () => {\n      const response = await fetch(url, {\n            method: 'POST',\n            headers: {'Content-Type': 'application/json',},\n            body: JSON.stringify(data),\n      })\n      const body = await response.json()\n\n      if (body.user_id) {\n        setToken(body.access_token)\n        setStep(steps.PROCESS)\n      } else {\n        setError(body.error_message || \"Unexpected error\");\n        setStep(steps.ERROR)\n        console.warn(body)\n      }\n    }\n    fetchData();\n\n  }, [code]);\n\n\n  useEffect(() => {\n    if (!token) return\n\n    console.log(\"// TODO...\")\n\n  }, [token]);\n\n  const steps = {\n    ACCESS: 0,\n    ERROR: 1,\n    AUTHORIZE: 2,\n    PROCESS: 3,\n  }\n\n  return (\n    <div className=\"Home\">\n      <Header className={step > steps.ACCESS ? \"HeaderInner\" : \"\"}/>\n      {\n        {\n          0: <InstagramAccess />,\n          1: <InstagramError message={error} />,\n          2: <>Authorizing...</>,\n          3: <>Processing...</>,\n        }[step]\n      }\n      <Footer/>\n    </div>\n  )\n}\n\nexport default Home;\n","import React from 'react';\n\nimport {\n  BrowserRouter as Router,\n  Route,\n  useLocation,\n} from \"react-router-dom\";\n\nimport Home from './Home'\n\nfunction Routes() {\n  return (\n    <Router>\n      <Route path=\"/\">\n        <HomeWithQueryParams />\n      </Route>\n    </Router>\n  );\n}\n\nfunction HomeWithQueryParams() {\n  const query = useQuery();\n  const params = {\n    error: query.get(\"error_description\"),\n    code: query.get(\"code\")\n  }\n  return (\n    <Home query={params}/>\n  )\n}\n\nfunction useQuery() {\n  return new URLSearchParams(useLocation().search);\n}\n\nexport default Routes;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Routes from './Routes';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Routes />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}